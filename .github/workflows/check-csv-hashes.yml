name: Check CSV File Hashes
on:
  push:
    branches:
      - '**'  # Запуск при push в любую ветку
  pull_request:
    branches: 
      - refactoring  # Запуск при PR в refactoring

# Добавленные разрешения для решения проблемы доступа
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-csv-hashes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Check CSV file hashes
        id: check-hashes
        run: |
          python <<EOF
          import hashlib
          import sys
          import os
          
          def calculate_file_hash(file_path, algorithm='sha256'):
              """Вычисляет хеш файла с использованием указанного алгоритма."""
              hash_obj = hashlib.new(algorithm)
              
              with open(file_path, 'rb') as f:
                  for chunk in iter(lambda: f.read(4096), b''):
                      hash_obj.update(chunk)
                      
              return hash_obj.hexdigest()
          
          # Используем текущую директорию как корень проекта
          project_root = os.getcwd()
          print(f"Текущая директория (корень проекта): {project_root}")
          
          # Пути к CSV файлам, которые нужно сравнить
          original_csv_path = os.path.join(project_root, 'tests', 'test_data', 'test_csv', 'original.csv')
          test_csv_path = os.path.join(project_root, 'tests', 'test_data', 'test_csv', 'test_output.csv')
          
          print(f"Путь к original.csv: {original_csv_path}")
          print(f"Путь к test_output.csv: {test_csv_path}")
          
          # Проверяем, существуют ли оба файла
          if not os.path.exists(test_csv_path):
              print(f"❌ Ошибка: Файл {test_csv_path} не найден")
              print("Содержимое директории tests:")
              if os.path.exists('tests'):
                  print(os.listdir('tests'))
              else:
                  print("Директория tests не найдена")
              sys.exit(1)
              
          if not os.path.exists(original_csv_path):
              print(f"❌ Ошибка: Файл {original_csv_path} не найден")
              print("Содержимое директории tests:")
              if os.path.exists('tests'):
                  print(os.listdir('tests'))
              else:
                  print("Директория tests не найдена")
              sys.exit(1)
          
          # Вычисляем хеши
          test_hash = calculate_file_hash(test_csv_path)
          original_hash = calculate_file_hash(original_csv_path)
          
          print(f"Хеш файла {test_csv_path}: {test_hash}")
          print(f"Хеш файла {original_csv_path}: {original_hash}")
          
          # Сравниваем хеши
          if test_hash == original_hash:
              print("✅ Хеши совпадают - файлы идентичны")
              sys.exit(0)
          else:
              print("❌ Хеши не совпадают - файлы различаются")
              sys.exit(1)
          EOF
        continue-on-error: true
      
      # Только для pull request: закрываем PR если хеши не совпадают
      # Обновлено для правильного доступа к данным PR
      - name: Comment and close PR on hash mismatch
        if: github.event_name == 'pull_request' && steps.check-hashes.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Pull request автоматически отклонен: хеши CSV файлов не совпадают. Файлы test_output.csv и original.csv должны быть идентичны.'
            });
            
            github.rest.pulls.update({
              pull_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });
      
      # Только для pull request: комментируем успех если хеши совпадают
      # Обновлено для правильного доступа к данным PR
      - name: Comment on PR when hashes match
        if: github.event_name == 'pull_request' && steps.check-hashes.outcome == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Проверка хешей CSV файлов пройдена успешно! Файлы test_output.csv и original.csv идентичны.'
            });
      
      # Только для push: выводим результат в status check
      - name: Set status check for push
        if: github.event_name == 'push'
        run: |
          if [ "${{ steps.check-hashes.outcome }}" == "success" ]; then
            echo "✅ CSV hashes match - files are identical"
            exit 0
          else
            echo "❌ CSV hashes do not match - files are different"
            exit 1
          fi
